Resources:
  UploadBucketD2C1DA78:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 60
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: S3EventProcessorStack/UploadBucket/Resource
  UploadBucketPolicy180778F4:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: UploadBucketD2C1DA78
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - UploadBucketD2C1DA78
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - UploadBucketD2C1DA78
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: S3EventProcessorStack/UploadBucket/Policy/Resource
  UploadBucketNotifications5E120ADB:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: UploadBucketD2C1DA78
      NotificationConfiguration:
        TopicConfigurations:
          - Events:
              - s3:ObjectCreated:*
            TopicArn:
              Ref: ObjectCreatedTopic92F47E19
      Managed: true
    DependsOn:
      - ObjectCreatedTopicPolicyA938ECFC
      - ObjectCreatedTopic92F47E19
    Metadata:
      aws:cdk:path: S3EventProcessorStack/UploadBucket/Notifications/Resource
  ObjectCreatedTopic92F47E19:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: s3-object-created-topic
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedTopic/Resource
  ObjectCreatedTopicPolicyA938ECFC:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::GetAtt:
                    - UploadBucketD2C1DA78
                    - Arn
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Ref: ObjectCreatedTopic92F47E19
            Sid: "0"
        Version: "2012-10-17"
      Topics:
        - Ref: ObjectCreatedTopic92F47E19
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedTopic/Policy/Resource
  ObjectCreatedQueue578839B4:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: s3-object-created-queue
      SqsManagedSseEnabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedQueue/Resource
  ObjectCreatedQueuePolicyC1B69C6F:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              Fn::GetAtt:
                - ObjectCreatedQueue578839B4
                - Arn
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: ObjectCreatedTopic92F47E19
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - ObjectCreatedQueue578839B4
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: ObjectCreatedQueue578839B4
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedQueue/Policy/Resource
  ObjectCreatedQueueS3EventProcessorStackObjectCreatedTopic7A69C3E8919F9E4E:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
          - ObjectCreatedQueue578839B4
          - Arn
      Protocol: sqs
      RawMessageDelivery: true
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - ObjectCreatedDlQueue5894BF94
            - Arn
      TopicArn:
        Ref: ObjectCreatedTopic92F47E19
    DependsOn:
      - ObjectCreatedQueuePolicyC1B69C6F
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedQueue/S3EventProcessorStackObjectCreatedTopic7A69C3E8/Resource
  ObjectCreatedDlQueue5894BF94:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: s3-object-created-dl-queue
      SqsManagedSseEnabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedDlQueue/Resource
  ObjectCreatedDlQueuePolicy5A5A4242:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              Fn::GetAtt:
                - ObjectCreatedDlQueue5894BF94
                - Arn
          - Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: ObjectCreatedTopic92F47E19
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Fn::GetAtt:
                - ObjectCreatedDlQueue5894BF94
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: ObjectCreatedDlQueue5894BF94
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedDlQueue/Policy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3EventProcessorStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: S3EventProcessorStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              bucket = props["BucketName"]
              notification_configuration = props["NotificationConfiguration"]
              request_type = event["RequestType"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']

              if managed:
                config = handle_managed(request_type, notification_configuration)
              else:
                config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

              put_bucket_notification_configuration(bucket, config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
            external_notifications = find_external_notifications(bucket, stack_id)

            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            return external_notifications

          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)

          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: S3EventProcessorStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  ObjectCreatedHandlerServiceRoleB42AE17B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedHandler/ServiceRole/Resource
  ObjectCreatedHandlerServiceRoleDefaultPolicyFA83AAE7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - ObjectCreatedQueue578839B4
                - Arn
        Version: "2012-10-17"
      PolicyName: ObjectCreatedHandlerServiceRoleDefaultPolicyFA83AAE7
      Roles:
        - Ref: ObjectCreatedHandlerServiceRoleB42AE17B
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedHandler/ServiceRole/DefaultPolicy/Resource
  ObjectCreatedHandlerF32E11B0:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: e07e71d2d7ffea04ef0fe6f0b3e2702e60a52fe8d70361c26e8a9bfd44313018.zip
      FunctionName: s3-object-created-handler
      Handler: bootstrap
      Role:
        Fn::GetAtt:
          - ObjectCreatedHandlerServiceRoleB42AE17B
          - Arn
      Runtime: provided.al2
    DependsOn:
      - ObjectCreatedHandlerServiceRoleDefaultPolicyFA83AAE7
      - ObjectCreatedHandlerServiceRoleB42AE17B
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedHandler/Resource
      aws:asset:path: asset.e07e71d2d7ffea04ef0fe6f0b3e2702e60a52fe8d70361c26e8a9bfd44313018
      aws:asset:is-bundled: true
      aws:asset:property: Code
  ObjectCreatedHandlerCurrentVersion1E425B7A39b2f0abb2916ae0d4c4483dc7d40a76:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: ObjectCreatedHandlerF32E11B0
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedHandler/CurrentVersion/Resource
  ObjectCreatedHandlerAliaslive968B4289:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: ObjectCreatedHandlerF32E11B0
      FunctionVersion:
        Fn::GetAtt:
          - ObjectCreatedHandlerCurrentVersion1E425B7A39b2f0abb2916ae0d4c4483dc7d40a76
          - Version
      Name: live
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedHandler/Aliaslive/Resource
  ObjectCreatedHandlerAliasliveSqsEventSourceS3EventProcessorStackObjectCreatedQueue793B2B10C31FD9C0:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn:
        Fn::GetAtt:
          - ObjectCreatedQueue578839B4
          - Arn
      FunctionName:
        Fn::Join:
          - ""
          - - Fn::Select:
                - 6
                - Fn::Split:
                    - ":"
                    - Ref: ObjectCreatedHandlerAliaslive968B4289
            - :live
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 10
      ScalingConfig:
        MaximumConcurrency: 2
    Metadata:
      aws:cdk:path: S3EventProcessorStack/ObjectCreatedHandler/Aliaslive/SqsEventSource:S3EventProcessorStackObjectCreatedQueue793B2B10/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/2VRQU7DMBB8S+/OtmkQZ9oKOCGgQVyrreOGpYkdsjYRsvJ3ZDsllbh4ZnZ27bG9hjxfgc8XOHAmq3PW0BF8aVGeBQ588FyA3zp5VlbsTnpiCV5MQ/JnLk86iS2yGgVrBv9mOpKhLZG4zrPXsnRHlj11lowO3rUeBX8x+FennApeInGdN7uSoyBswe9NE9sjzo2XHi4OyKwswyaAaLA9Vgh+d9IPTssY5F31PAW60E1DyKGQyP230rY0rpfqCbuOdB28/9VxjFEUx6L4I/Hs0mI9TT4727n44DujK0rXzzNsug+E1eJu+qxlwJQ4q81kP5pL8FHUJod1AcVyIF2ZgZfYVrc3i08mynqnLbUK9gl/AUQC4hoJAgAA
    Metadata:
      aws:cdk:path: S3EventProcessorStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Outputs:
  S3BucketUrl:
    Value:
      Fn::Join:
        - ""
        - - s3://
          - Ref: UploadBucketD2C1DA78
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
